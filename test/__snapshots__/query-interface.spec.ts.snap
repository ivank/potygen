// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query Interface Should convert between fields named sql (SELECT FALSE as "col1", TRUE as "col2") 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": "boolean",
    },
    Object {
      "name": "col2",
      "type": "boolean",
    },
  ],
}
`;

exports[`Query Interface Should convert between fields not named sql (SELECT FALSE as "col1", TRUE as "col2") 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": "boolean",
    },
    Object {
      "name": "col2",
      "type": "boolean",
    },
  ],
}
`;

exports[`Query Interface Should convert binary expression column sql (SELECT (col1 + col2) AS "res1" FROM table1) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "res1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert binary expression numbers sql (SELECT 1+2) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "?column?",
      "type": "number",
    },
  ],
}
`;

exports[`Query Interface Should convert binary expression string sql (SELECT 'test' || 'other') 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "?column?",
      "type": "string",
    },
  ],
}
`;

exports[`Query Interface Should convert boolean fields mixed sql (SELECT FALSE, TRUE as "col2") 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "bool",
      "type": "boolean",
    },
    Object {
      "name": "col2",
      "type": "boolean",
    },
  ],
}
`;

exports[`Query Interface Should convert boolean fields named sql (SELECT FALSE as "col1", TRUE as "col2") 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": "boolean",
    },
    Object {
      "name": "col2",
      "type": "boolean",
    },
  ],
}
`;

exports[`Query Interface Should convert boolean fields not named sql (SELECT FALSE, TRUE) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "bool",
      "type": "boolean",
    },
    Object {
      "name": "bool",
      "type": "boolean",
    },
  ],
}
`;

exports[`Query Interface Should convert case columns sql (
        SELECT
          CASE col1
            WHEN 12 THEN table1.col1
            WHEN 20 THEN col2
            ELSE 'other'
          END AS "res1"
        FROM table1
      ) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "res1",
      "type": Object {
        "items": Array [
          Object {
            "column": "col1",
            "schema": "public",
            "table": "table1",
            "type": "column",
          },
          Object {
            "column": "col2",
            "schema": "public",
            "table": "table1",
            "type": "column",
          },
          "string",
        ],
        "type": "union",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert case sql (SELECT CASE WHEN TRUE THEN TRUE ELSE 'other' END) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "?column?",
      "type": Object {
        "items": Array [
          "boolean",
          "string",
        ],
        "type": "union",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert combination select sql (
        SELECT
          col1 AS "res1",
          (SELECT id FROM table2 JOIN table3 ON table3.id = table2.id AND table3.val > :joinVal LIMIT 1)
        FROM table1
        UNION
        SELECT
          col1 AS "res1",
          table4.col2
        FROM table4
        WHERE :id = table1.id AND table4.id = :id
      ) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "joinVal",
      "type": Object {
        "column": "val",
        "schema": "public",
        "table": "table3",
        "type": "column",
      },
    },
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "res1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table2",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert complex row sql (SELECT (1, 2+2, :param1), ROW (123), (1,2,(3))) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "param1",
      "type": "unknown",
    },
  ],
  "result": Array [
    Object {
      "name": "row",
      "type": "string",
    },
    Object {
      "name": "row",
      "type": "string",
    },
    Object {
      "name": "row",
      "type": "string",
    },
  ],
}
`;

exports[`Query Interface Should convert enum type sql (SELECT id::custom_type FROM table1) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "id",
      "type": Object {
        "name": "custom_type",
        "type": "record",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert function param sql (SELECT ABS($id) FROM table1) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "id",
      "type": Object {
        "index": 0,
        "name": "ABS",
        "type": "function_arg",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "abs",
      "type": Object {
        "args": Array [
          "string",
        ],
        "name": "ABS",
        "type": "function",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert function sql (SELECT ABS(id) FROM table1) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "abs",
      "type": Object {
        "args": Array [
          Object {
            "column": "id",
            "schema": "public",
            "table": "table1",
            "type": "column",
          },
        ],
        "name": "ABS",
        "type": "function",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert join fields sql (
        SELECT
          t1.col1 as "col1",
          t1.col2 as "myCol2",
          table2.col2 as "other"
        FROM table1 AS t1
        JOIN table2 ON table2.id = table1.id
      ) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "myCol2",
      "type": Object {
        "column": "col2",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "other",
      "type": Object {
        "column": "col2",
        "schema": "public",
        "table": "table2",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert join with aliases fields sql (
        SELECT
          t1.col1 as "col1",
          t1.col2 as "myCol2",
          myT2.col2 as "other",
          myT4.col_9 as "test"
        FROM fit.table1 AS t1
        JOIN fit.table2 as "myT2" ON table2.id = table1.id
        JOIN table3 as "myT4" ON myT2.id = table1.id
      ) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "fit",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "myCol2",
      "type": Object {
        "column": "col2",
        "schema": "fit",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "other",
      "type": Object {
        "column": "col2",
        "schema": "fit",
        "table": "table2",
        "type": "column",
      },
    },
    Object {
      "name": "test",
      "type": Object {
        "column": "col_9",
        "schema": "public",
        "table": "table3",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert limit and offset params sql (SELECT id FROM table1 LIMIT :limit OFFSET :offset::int) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "limit",
      "type": "string",
    },
    Object {
      "name": "offset",
      "type": "number",
    },
  ],
  "result": Array [
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert multiple params infer type from one 1 sql (SELECT col1 FROM table1 WHERE :id = table1.id AND :id) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert multiple params infer type from one 2 sql (SELECT col1 FROM table1 WHERE :id IS NOT NULL OR :id = table1.id) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert multiple params sql (SELECT :test1 AS "res1", :test2) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "test1",
      "type": "unknown",
    },
    Object {
      "name": "test2",
      "type": "unknown",
    },
  ],
  "result": Array [
    Object {
      "name": "res1",
      "type": "string",
    },
    Object {
      "name": "?column?",
      "type": "string",
    },
  ],
}
`;

exports[`Query Interface Should convert nested select sql (
        SELECT
          col1 AS "res1",
          (SELECT id FROM table2 JOIN table3 ON table3.id = table2.id AND table3.val > :joinVal LIMIT 1)
        FROM table1
        WHERE :id = table1.id
      ) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "joinVal",
      "type": Object {
        "column": "val",
        "schema": "public",
        "table": "table3",
        "type": "column",
      },
    },
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "res1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table2",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert nested typed array param in select sql (SELECT :param::int[][][]) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "param",
      "type": Object {
        "items": Object {
          "items": Object {
            "items": "number",
            "type": "array",
          },
          "type": "array",
        },
        "type": "array",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "array",
      "type": Object {
        "items": Object {
          "items": Object {
            "items": "number",
            "type": "array",
          },
          "type": "array",
        },
        "type": "array",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert single param sql (SELECT :test1 AS "res1") 1`] = `
Object {
  "params": Array [
    Object {
      "name": "test1",
      "type": "unknown",
    },
  ],
  "result": Array [
    Object {
      "name": "res1",
      "type": "string",
    },
  ],
}
`;

exports[`Query Interface Should convert star sql (SELECT * FROM table1) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "*",
      "type": Object {
        "schema": "public",
        "table": "table1",
        "type": "star",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert static fields sql (SELECT col1 as "col1", col2 as "myCol2" FROM table1) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "myCol2",
      "type": Object {
        "column": "col2",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert string fields not named sql (SELECT 'test', $$Dianne's horse$$, $SomeTag$Dianne's horse$SomeTag$) 1`] = `
Object {
  "params": Array [],
  "result": Array [
    Object {
      "name": "?column?",
      "type": "string",
    },
    Object {
      "name": "?column?",
      "type": "string",
    },
    Object {
      "name": "?column?",
      "type": "string",
    },
  ],
}
`;

exports[`Query Interface Should convert typed array param in select sql (SELECT :param::int[]) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "param",
      "type": Object {
        "items": "number",
        "type": "array",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "array",
      "type": Object {
        "items": "number",
        "type": "array",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert typed param in where sql (SELECT col1 FROM table1 WHERE :id::int IS NOT NULL) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "id",
      "type": "number",
    },
  ],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;

exports[`Query Interface Should convert where params sql (
        SELECT col1, col2
        FROM table1
        WHERE
          table1.id = :id
          AND col1 > :val1
      ) 1`] = `
Object {
  "params": Array [
    Object {
      "name": "id",
      "type": Object {
        "column": "id",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "val1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
  "result": Array [
    Object {
      "name": "col1",
      "type": Object {
        "column": "col1",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
    Object {
      "name": "col2",
      "type": Object {
        "column": "col2",
        "schema": "public",
        "table": "table1",
        "type": "column",
      },
    },
  ],
}
`;
