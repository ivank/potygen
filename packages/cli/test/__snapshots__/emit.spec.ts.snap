// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query Interface Should convert array constructor sql (SELECT ARRAY(SELECT json_build_object('test', other.integer_col) FROM all_types AS other WHERE all_types.id = other.id) as "arr" FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    arr: {
        test?: number;
    }[];
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert case to string literal union sql (SELECT CASE accounts.source_system WHEN 'SSE' THEN 'SSE' WHEN 'FITDB' THEN 'FITDB' ELSE NULL END AS "sourceSystem" FROM accounts) 1`] = `
"export interface Params {
}
export interface Result {
    sourceSystem: \\"SSE\\" | \\"FITDB\\" | undefined;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert descriptive property names sql (SELECT 'test' AS "some column", 'test2' AS "test") 1`] = `
"export interface Params {
}
export interface Result {
    \\"some column\\": \\"test\\";
    test: \\"test2\\";
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert different result types for returning sql (UPDATE all_types SET id = 1 RETURNING *) 1`] = `
"import { Json } from \\"@potygen/potygen\\";
export interface Params {
}
export interface Result<TJson_col = unknown, TJsonb_col = unknown> {
    id: number;
    /**
     * This column should never be null
     */
    not_null: number;
    default_not_null: number;
    bigint_col?: number;
    bigserial_col: number;
    bit_col?: string;
    bit_varying_col?: string;
    boolean_col?: boolean;
    box_col?: string;
    bytea_col: Buffer;
    character_col?: string;
    character_varying_col?: string;
    cidr_col?: string;
    circle_col: {
        x: number;
        y: number;
        radius: number;
    };
    date_col?: Date;
    double_col?: number;
    inet_col?: string;
    integer_col?: number;
    interval_col: {
        years: number;
        months: number;
        days: number;
        hours: number;
        minutes: number;
        seconds: number;
        milliseconds: number;
    };
    json_col?: Json<TJson_col>;
    jsonb_col?: Json<TJsonb_col>;
    line_col?: string;
    lseg_col?: string;
    macaddr_col?: string;
    money_col?: string;
    numeric_col?: number;
    path_col?: string;
    pg_lsn_col?: string;
    point_col: {
        x: number;
        y: number;
    };
    polygon_col?: string;
    real_col?: number;
    smallint_col?: number;
    smallserial_col: number;
    serial_col: number;
    text_col?: string;
    time_col?: string;
    time_with_time_zone_col?: Date;
    timestamp_col?: Date;
    timestamp_with_time_zone_col?: Date;
    tsquery_col?: string;
    tsvector_col?: string;
    txid_snapshot_col?: string;
    uuid_col?: string;
    xml_col?: string;
    item: string;
    /**
     *
     *   This column is an enum.
     *   It also contains several lines:
     *     - line1
     *     - line2
     *
     */
    state?: \\"Active\\" | \\"Pending\\" | \\"Dispute\\" | \\"Closed\\";
    state_arr?: (\\"Active\\" | \\"Pending\\" | \\"Dispute\\" | \\"Closed\\")[];
    item_arr?: string[];
    static_arr?: number[];
}
export interface Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: Params;
    result: Result<TJson_col, TJsonb_col>;
}
"
`;

exports[`Query Interface Should convert different result types sql (SELECT * FROM all_types) 1`] = `
"import { Json } from \\"@potygen/potygen\\";
export interface Params {
}
export interface Result<TJson_col = unknown, TJsonb_col = unknown> {
    id: number;
    /**
     * This column should never be null
     */
    not_null: number;
    default_not_null: number;
    bigint_col?: number;
    bigserial_col: number;
    bit_col?: string;
    bit_varying_col?: string;
    boolean_col?: boolean;
    box_col?: string;
    bytea_col: Buffer;
    character_col?: string;
    character_varying_col?: string;
    cidr_col?: string;
    circle_col: {
        x: number;
        y: number;
        radius: number;
    };
    date_col?: Date;
    double_col?: number;
    inet_col?: string;
    integer_col?: number;
    interval_col: {
        years: number;
        months: number;
        days: number;
        hours: number;
        minutes: number;
        seconds: number;
        milliseconds: number;
    };
    json_col?: Json<TJson_col>;
    jsonb_col?: Json<TJsonb_col>;
    line_col?: string;
    lseg_col?: string;
    macaddr_col?: string;
    money_col?: string;
    numeric_col?: number;
    path_col?: string;
    pg_lsn_col?: string;
    point_col: {
        x: number;
        y: number;
    };
    polygon_col?: string;
    real_col?: number;
    smallint_col?: number;
    smallserial_col: number;
    serial_col: number;
    text_col?: string;
    time_col?: string;
    time_with_time_zone_col?: Date;
    timestamp_col?: Date;
    timestamp_with_time_zone_col?: Date;
    tsquery_col?: string;
    tsvector_col?: string;
    txid_snapshot_col?: string;
    uuid_col?: string;
    xml_col?: string;
    item: string;
    /**
     *
     *   This column is an enum.
     *   It also contains several lines:
     *     - line1
     *     - line2
     *
     */
    state?: \\"Active\\" | \\"Pending\\" | \\"Dispute\\" | \\"Closed\\";
    state_arr?: (\\"Active\\" | \\"Pending\\" | \\"Dispute\\" | \\"Closed\\")[];
    item_arr?: string[];
    static_arr?: number[];
}
export interface Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: Params;
    result: Result<TJson_col, TJsonb_col>;
}
"
`;

exports[`Query Interface Should convert empty array sql (SELECT ARRAY[]) 1`] = `
"export interface Params {
}
export interface Result {
    array: unknown[];
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert enum column sql (SELECT state FROM account_levelisations) 1`] = `
"export interface Params {
}
export interface Result {
    state: \\"Pending\\" | \\"Done\\";
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert enum sql (SELECT 'Pending'::account_levelisation_state) 1`] = `
"export interface Params {
}
export interface Result {
    row: \\"Pending\\" | \\"Done\\";
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert function result double sql (SELECT ABS(ABS(integer_col)) FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    abs: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert function result single sql (SELECT ABS(integer_col) FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    abs: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert insert sql (INSERT INTO all_types(not_null, integer_col, character_col) VALUES $$vals(notNull, integerCol, characterCol)) 1`] = `
"export interface Params {
    vals: {
        notNull?: number;
        integerCol?: number;
        characterCol?: string;
    }[];
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert invalid identifiers as property names sql (SELECT 'test' AS "12") 1`] = `
"export interface Params {
}
export interface Result {
    \\"12\\": \\"test\\";
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert json returning sql (UPDATE all_types SET id = 1 RETURNING json_col) 1`] = `
"import { Json } from \\"@potygen/potygen\\";
export interface Params {
}
export interface Result<TJson_col = unknown> {
    json_col?: Json<TJson_col>;
}
export interface Query<TJson_col = unknown> {
    params: Params;
    result: Result<TJson_col>;
}
"
`;

exports[`Query Interface Should convert load non nullable column sql (SELECT not_null FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    bool: boolean;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert load non nullable column sql (SELECT not_null::text FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    bool: boolean;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert load nullable column sql (SELECT integer_col FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    integer_col?: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert load nullable column sql (SELECT integer_col::text FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    integer_col?: string;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert nested function explicit type sql (SELECT (ARRAY_AGG(integer_col), 1)::int[] FROM all_types GROUP BY id) 1`] = `
"export interface Params {
}
export interface Result {
    array: number[];
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert nested function guess type sql (SELECT ABS(ARRAY_LENGTH(ARRAY_AGG(integer_col), 1)) FROM all_types GROUP BY id) 1`] = `
"export interface Params {
}
export interface Result {
    abs: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert nullability sql (SELECT not_null FROM all_types) 1`] = `
"export interface Params {
}
export interface Result {
    bool: boolean;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert operators integer sql (SELECT integer_col + integer_col AS "test1" FROM all_types WHERE id = $id) 1`] = `
"export interface Params {
    id?: number;
}
export interface Result {
    test1?: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert operators string sql (SELECT character_col + integer_col AS "test1" FROM all_types WHERE character_col = $text) 1`] = `
"export interface Params {
    text?: string;
}
export interface Result {
    test1?: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert parameter group collapse sql (SELECT id FROM all_types WHERE $q = '' OR character_varying_col = $q) 1`] = `
"export interface Params {
    q?: string;
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;

exports[`Query Interface Should convert simple sql (SELECT id, character_col FROM all_types WHERE id = :id) 1`] = `
"export interface Params {
    id?: number;
}
export interface Result {
    id: number;
    character_col?: string;
}
export interface Query {
    params: Params;
    result: Result;
}
"
`;
