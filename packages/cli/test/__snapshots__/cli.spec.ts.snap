// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI Should use cli to run pipeline on sql files 1`] = `
[
  "account-levelisation.update.query.queries.ts",
  "account-levelisation.upsert.query.queries.ts",
  "account-levelisations-bulk-close-accounts.query.queries.ts",
  "account-levelisations-set-bulk-update.query.queries.ts",
  "account-levelisations.query.queries.ts",
  "account-meter-registers-create.query.queries.ts",
  "account-verification.update.query.queries.ts",
  "accounts.list.query.queries.ts",
  "accounts.queries.ts",
  "accounts.query.queries.ts",
  "active-meters-with-last-read.query.queries.ts",
  "active-meters-wth-reads.query.queries.ts",
  "active-reads.view.queries.ts",
  "bacs.query.queries.ts",
  "contracts.queries.ts",
  "csa-account-by-id.query.queries.ts",
  "csa-account-contracts-update.query.queries.ts",
  "cte-levelisation-details.query.queries.ts",
  "cte.query.queries.ts",
  "delete-accounts.query.queries.ts",
  "generation-read-data.query.queries.ts",
  "insert-account.query.queries.ts",
  "insert.process.query.queries.ts",
  "installation-meter-update.query.queries.ts",
  "installations.queries.ts",
  "levelisation-customer-data.query.queries.ts",
  "levelisation-details.query.queries.ts",
  "levelisation-individual-reads.list.query.queries.ts",
  "levelisations.list.query.queries.ts",
  "meter-create.query.queries.ts",
  "meter-reads.queries.ts",
  "overwritten.query.queries.ts",
  "process-batch.query.queries.ts",
  "rates-by-tariff-ids.query.queries.ts",
  "read-create.query.queries.ts",
  "reads-by-account-id.query.queries.ts",
  "recordsets.query.queries.ts",
  "tariff-rates.queries.ts",
  "update-registers.queries.ts",
  "update-with-cte-from-values.queries.ts",
]
`;

exports[`CLI Should use cli to run pipeline on sql files: account-levelisation.update.query.queries.ts 1`] = `
"export interface Params {
    isAccepted?: boolean;
    id?: number;
}
export interface Result {
    id: number;
    isAccepted: boolean;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-levelisation.upsert.query.queries.ts 1`] = `
"export interface Params {
    levelisationId?: number;
    start?: Date;
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-levelisations.query.queries.ts 1`] = `
"import { Json } from "@potygen/potygen";
export interface Params {
    q?: string;
    resolvedPostlev?: "" | boolean;
    state?: ("Pending" | "Done");
    levelisationId?: number;
    ids?: number[];
    sortField?: "totalPayment" | "vatPayment" | "generationPayment" | "exportPayment" | "generationEnergy" | "exportEnergy" | "cfrFitId" | "state" | "isAccepted" | "error" | "exportType";
    sortOrder?: "DESC" | "ASC";
    limit?: number;
    offset?: number;
}
export interface Result<TGenerationPeriods = unknown, TExportPeriods = unknown, TErrorParams = unknown> {
    id: number;
    levelisationId: number;
    accountId: number;
    installationId: number;
    state: "Pending" | "Done";
    isAccepted: boolean;
    generationStartReadOn?: Date;
    generationStartReadValue?: number;
    generationEndReadOn?: Date;
    generationEndReadValue?: number;
    generationPercentageSplit?: number;
    generationPayment?: number;
    generationEnergy?: number;
    exportStartReadOn?: Date;
    exportStartReadValue?: number;
    exportEndReadOn?: Date;
    exportEndReadValue?: number;
    exportPercentageSplit?: number;
    exportPayment?: number;
    exportEnergy?: number;
    exportType?: "Deemed" | "Metered Export" | "Off Grid" | "PPA";
    technologyType?: "PV" | "H" | "W" | "AD" | "CHP";
    totalPayment?: number;
    vatPayment?: number;
    generationPeriods?: Json<TGenerationPeriods>;
    exportPeriods?: Json<TExportPeriods>;
    errorCode?: string;
    errorParams?: Json<TErrorParams>;
    cfrFitId: string;
    resolvedPostlevId?: number;
    isBacsPaymentsSent?: boolean;
    isChequePaymentsSent?: boolean;
}
export interface Query<TGenerationPeriods = unknown, TExportPeriods = unknown, TErrorParams = unknown> {
    params: Params;
    result: Result<TGenerationPeriods, TExportPeriods, TErrorParams>[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-levelisations-bulk-close-accounts.query.queries.ts 1`] = `
"export interface Params {
    ids?: number[];
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-levelisations-set-bulk-update.query.queries.ts 1`] = `
"export interface Params {
    ids?: number[];
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-meter-registers-create.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
    customerLabel?: string;
    industryLabel?: string;
    smtRuleStart?: any;
    smtRuleEnd?: unknown;
    smtRuleStartOn?: Date;
    multiplier?: number;
    meterId: number;
    indexPosition: number;
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: account-verification.update.query.queries.ts 1`] = `
"export interface Params {
    items: {
        GH_account_id?: unknown;
        ["MV date"]?: unknown;
    }[];
    currentDate: Date;
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: accounts.list.query.queries.ts 1`] = `
"export interface Params {
    q?: string;
    ids?: number[];
}
export interface Result {
    total: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: accounts.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: accounts.query.queries.ts 1`] = `
"export interface Params {
    q?: string;
    ids?: number[];
    limit?: number;
    offset?: number;
}
export interface Result {
    id: number;
    state: "Active" | "Pending" | "Dispute" | "Closed";
    startOn?: Date;
    firstName: string;
    lastName: string;
    email?: string;
    address: string;
    fitIds: string[];
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: active-meters-with-last-read.query.queries.ts 1`] = `
"export interface Params {
    intervalStart?: Date;
    intervalEnd?: Date;
    accountId?: number;
    meterId?: number;
}
export interface Result {
    id: number;
    msn: string;
    mpan: string;
    make: string;
    model: string;
    type: "Export" | "Generation";
    currentPeriodRead?: {
        id: number;
        value: number;
        dateOn: string;
        submittedAt?: string;
        reason?: string;
        type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    };
    previousPeriodRead?: {
        id: number;
        value: number;
        dateOn: string;
        submittedAt?: string;
        reason?: string;
        type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    };
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: active-meters-wth-reads.query.queries.ts 1`] = `
"export interface Params {
    intervalStart: Date;
    intervalEnd: Date;
    accountId: number;
    meterId?: number;
}
export interface Result {
    id: number;
    msn: string;
    mpan: string;
    make: string;
    model: string;
    type: "Export" | "Generation";
    currentPeriodRead?: {
        id: number;
        value: number;
        dateOn: string;
        submittedAt?: string;
        reason?: string;
        type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    };
    previousPeriodRead?: {
        id: number;
        value: number;
        dateOn: string;
        submittedAt?: string;
        reason?: string;
        type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    };
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: active-reads.view.queries.ts 1`] = `
"import { Json } from "@potygen/potygen";
export interface Params {
}
export interface Result<THistory = unknown> {
    id: number;
    meter_id: number;
    date_on: Date;
    value: number;
    type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    reason?: string;
    created_at: Date;
    updated_at?: Date;
    /**
     * sql-fit: MeterReading.MeterReadingId
     */
    source_system_id?: number;
    checked: boolean;
    deleted_at?: Date;
    submitted_at?: Date;
    history: Json<THistory>;
    overwritten_at?: Date;
}
export interface Query<THistory = unknown> {
    params: Params;
    result: Result<THistory>[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: bacs.query.queries.ts 1`] = `
"export interface Params {
    quarter?: string;
    perPage?: string;
    offset?: string;
}
export interface Result {
    fitId: string;
    name?: string;
    amount: number;
    quarter?: string;
    bankDetails: string;
    addressLine1?: string;
    addressLine2?: string;
    addressLine3?: string;
    postcode: string;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: contracts.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: csa-account-by-id.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
}
export interface Result {
    id: number;
    state: "Active" | "Pending" | "Dispute" | "Closed";
    contacts: {
        id: number;
        name: string;
        email?: string;
        phone?: string;
        address: {
            id: number;
            addressLine1?: string;
            addressLine2?: string;
            addressLine3?: string;
            city?: string;
            country: string;
            county?: string;
            postCode: string;
        };
        isPrimaryContact: boolean;
        isNominatedRecipient: boolean;
    }[];
    paymentDetails: {
        beneficiaryAccountNumber: string;
        beneficiaryName?: string;
        beneficiarySortCode?: string;
    };
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: csa-account-contracts-update.query.queries.ts 1`] = `
"export interface Params {
    phone?: string;
    email?: string;
    currentDate: Date;
    id: number;
}
export interface Result {
    email?: string;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: cte.query.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
    region: string;
    product: string;
    product_units: number;
    product_sales: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: cte-levelisation-details.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
}
export interface Result {
    id: number;
    totalCount?: number;
    fitTotalExportPayment?: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: delete-accounts.query.queries.ts 1`] = `
"export interface Params {
    type?: "FIT" | "SEG";
    state?: "Active" | "Pending" | "Dispute" | "Closed";
}
export interface Result {
    id: number;
    sourceSystemId?: number;
    customerId: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: generation-read-data.query.queries.ts 1`] = `
"export interface Params {
    installationId?: number;
    exportDateOn?: Date;
}
export interface Result {
    dateOn: Date;
    value: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: insert.process.query.queries.ts 1`] = `
"import { Json } from "@potygen/potygen";
export interface Params<TParamItemsData = unknown> {
    items: {
        processId?: number;
        idempotencyKey?: string;
        data?: TParamItemsData;
        accountId?: number;
    }[];
}
export interface Result<TData = unknown> {
    id: number;
    data: Json<TData>;
}
export interface Query<TParamItemsData = unknown, TData = unknown> {
    params: Params<TParamItemsData>;
    result: Result<TData>[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: insert-account.query.queries.ts 1`] = `
"export interface Params {
    state: "Active" | "Pending" | "Dispute" | "Closed";
    paymentDetails?: {
        paymentPlan: "BACs" | "Cheque" | "Internal Transfer";
        beneficiaryName?: string;
        beneficiarySortCode?: string;
        beneficiaryAccountNumber?: string;
    };
    companyDetails: {
        companyRegNumber: string;
        companyVatNumber: string;
        companyName: string;
    };
    startOn: Date;
    endOn?: Date;
    currentDate: Date;
}
export interface Result {
    id: number;
    state: "Active" | "Pending" | "Dispute" | "Closed";
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: installation-meter-update.query.queries.ts 1`] = `
"export interface Params {
    removalDate?: Date;
    meterId?: number;
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: installations.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: levelisation-customer-data.query.queries.ts 1`] = `
"export interface Params {
    accountLevelisationId: number;
}
export interface Result {
    interval: {
        start: string;
        end: string;
    };
    levelisationQuarter: string;
    accountId: number;
    contact?: {
        title?: "Mrs" | "Miss" | "Dr" | "Ms" | "Mr";
        firstName: string;
        lastName: string;
        email?: string;
        address: {
            city?: string;
            postcode: string;
            line1?: string;
            line2?: string;
            line3?: string;
        };
    };
    installation?: {
        installationId: number;
        technologyType: "PV" | "H" | "W" | "AD" | "CHP";
        meters: {
            id: number;
            startOn?: string;
            endOn?: string;
            type: "Export" | "Generation";
            reads: {
                value: number;
                dateOn: string;
                type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
                id: number;
            }[];
        }[];
        contracts: {
            schemeType: "FIT" | "SEG";
            schemeAccountReference: string;
            capacity: number;
            generationTariffId?: number;
            exportTariffId?: number;
            startOn: string;
            endOn?: string;
            exportType?: "Deemed" | "Metered Export" | "Off Grid" | "PPA";
            exportPercentageSplit?: number;
            generationPercentageSplit?: number;
            generationRates: {
                id: number;
                startOn: string;
                endOn: string;
                rate: number;
            }[];
            exportRates: {
                id: number;
                startOn: string;
                endOn: string;
                rate: number;
            }[];
        }[];
    };
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: levelisation-details.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
}
export interface Result {
    id: number;
    quarter: string;
    startOn: Date;
    endOn: Date;
    totalCount: number;
    pendingCount: number;
    errorCount: number;
    successCount: number;
    backsSent: number;
    chequeSent: number;
    totalGenerationPayment: number;
    totalExportPayment: number;
    totalGenerationEnergy: number;
    totalExportEnergy: number;
    totalMeteredExportEnergy: number;
    totalMeteredExportPayment: number;
    totalDeemedExportEnergy: number;
    totalDeemedExportPayment: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: levelisation-individual-reads.list.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
    limit: number;
    offset: number;
}
export interface Result {
    id?: number;
    dateOn?: Date;
    value?: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: levelisations.list.query.queries.ts 1`] = `
"export interface Params {
    q?: string;
    ids?: number[];
    sortField?: "quarter";
    sortOrder?: "DESC" | "ASC";
    limit?: number;
    offset?: number;
}
export interface Result {
    id: number;
    quarter: string;
    startOn: Date;
    endOn: Date;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: meter-create.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
    msn?: string;
    make?: string;
    model?: string;
    mpan?: string;
    createdAt?: Date;
}
export interface Result {
    id: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: meter-reads.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: overwritten.query.queries.ts 1`] = `
"export interface Params {
    currentDate?: Date;
    meterId?: number;
    intervalStart?: Date;
    intervalEnd?: Date;
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: process-batch.query.queries.ts 1`] = `
"export interface Params {
    fitIds?: string[];
}
export interface Result {
    cfrFiTId?: string;
    email?: string;
    contactName: string;
    company?: string;
    line1?: string;
    line2: string;
    town?: string;
    postcode: string;
    county?: string;
    country: string;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: rates-by-tariff-ids.query.queries.ts 1`] = `
"export interface Params {
    ids: number[][];
}
export interface Result {
    tariffId: number;
    rate: number;
    startOn: Date;
    tariffCode: string;
    tariffType: "Export" | "Generation" | "SEG";
    endOn?: Date;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: read-create.query.queries.ts 1`] = `
"export interface Params {
    meterId?: number;
    reason?: string;
    type?: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    dateOn?: Date;
    submittedAt?: Date;
    value?: number;
}
export interface Result {
    id: number;
    value: number;
    meterId: number;
    submittedAt?: Date;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: reads-by-account-id.query.queries.ts 1`] = `
"export interface Params {
    id?: number;
    offset?: string;
    perPage?: string;
}
export interface Result {
    id: number;
    msn: string;
    meterId: number;
    dateOn: Date;
    value: number;
    type: "Opening" | "Closing" | "Quarterly" | "Meter Verification";
    reason?: string;
    createdAt: Date;
    updatedAt?: Date;
    /**
     * sql-fit: MeterReading.MeterReadingId
     */
    sourceSystemId?: number;
    mpan: string;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: recordsets.query.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
    id: number;
    exportType: string;
    energy: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: tariff-rates.queries.ts 1`] = `
"export interface Params {
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: update-registers.queries.ts 1`] = `
"export interface Params {
    registers: {
        id?: number;
        customerLabel?: unknown;
        industryLabel?: unknown;
        smtRuleStart?: string;
        smtRuleEnd?: string;
        smtRuleStartOn?: Date;
        multiplier?: unknown;
        meterId?: unknown;
        indexPosition?: number;
    }[];
}
export interface Result {
    index_position: number;
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on sql files: update-with-cte-from-values.queries.ts 1`] = `
"export interface Params {
    registers: {
        id: unknown;
        customerLabel: unknown;
        industryLabel: unknown;
        smtRuleStart?: unknown;
        smtRuleEnd?: unknown;
        smtRuleStartOn?: unknown;
        multiplier: unknown;
        meterId: unknown;
        indexPosition?: unknown;
    }[];
}
export interface Result {
}
export interface Query {
    params: Params;
    result: Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on ts files 1`] = `
[
  "ts-file1.queries.ts",
  "ts-file2.queries.ts",
]
`;

exports[`CLI Should use cli to run pipeline on ts files: ts-file1.queries.ts 1`] = `
"export interface Sql1Params {
}
export interface Sql1Result<TJson_col = unknown, TJsonb_col = unknown> {
    id: number;
    /**
     * This column should never be null
     */
    not_null: number;
    default_not_null: number;
    bigint_col?: number;
    bigserial_col: number;
    bit_col?: string;
    bit_varying_col?: string;
    boolean_col?: boolean;
    box_col?: string;
    bytea_col: Buffer;
    character_col?: string;
    character_varying_col?: string;
    cidr_col?: string;
    circle_col: {
        x: number;
        y: number;
        radius: number;
    };
    date_col?: Date;
    double_col?: number;
    inet_col?: string;
    integer_col?: number;
    interval_col: {
        years: number;
        months: number;
        days: number;
        hours: number;
        minutes: number;
        seconds: number;
        milliseconds: number;
    };
    json_col?: Json<TJson_col>;
    jsonb_col?: Json<TJsonb_col>;
    line_col?: string;
    lseg_col?: string;
    macaddr_col?: string;
    money_col?: string;
    numeric_col?: number;
    path_col?: string;
    pg_lsn_col?: string;
    point_col: {
        x: number;
        y: number;
    };
    polygon_col?: string;
    real_col?: number;
    smallint_col?: number;
    smallserial_col: number;
    serial_col: number;
    text_col?: string;
    time_col?: string;
    time_with_time_zone_col?: Date;
    timestamp_col?: Date;
    timestamp_with_time_zone_col?: Date;
    tsquery_col?: string;
    tsvector_col?: string;
    txid_snapshot_col?: string;
    uuid_col?: string;
    xml_col?: string;
    item: string;
    /**
     *
     *   This column is an enum.
     *   It also contains several lines:
     *     - line1
     *     - line2
     *
     */
    state?: "Active" | "Pending" | "Dispute" | "Closed";
    state_arr?: ("Active" | "Pending" | "Dispute" | "Closed")[];
    item_arr?: string[];
    static_arr?: number[];
}
export interface Sql1Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: Sql1Params;
    result: Sql1Result<TJson_col, TJsonb_col>[];
}
export interface Sql2Params<TJson_col = unknown, TJsonb_col = unknown> {
    id?: number;
}
export interface Sql2Result {
    id: number;
    character_col?: string;
}
export interface Sql2Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: Sql2Params<TJson_col, TJsonb_col>;
    result: Sql2Result[];
}
export interface Sql3Params {
    id?: number;
}
export interface Sql3Result {
    id: number;
    character_col?: string;
}
export interface Sql3Query {
    params: Sql3Params;
    result: Sql3Result[];
}
"
`;

exports[`CLI Should use cli to run pipeline on ts files: ts-file2.queries.ts 1`] = `
"export interface Sql2Params {
    id?: number;
}
export interface Sql2Result {
    character_col?: string;
}
export interface Sql2Query {
    params: Sql2Params;
    result: Sql2Result[];
}
"
`;

exports[`CLI Should use type prefix when generating files 1`] = `
[
  "ts-file1.queries.ts",
  "ts-file2.queries.ts",
]
`;

exports[`CLI Should use type prefix when generating files: ts-file1.queries.ts 1`] = `
"export interface TMP2Sql1Params {
}
export interface TMP2Sql1Result<TJson_col = unknown, TJsonb_col = unknown> {
    id: number;
    /**
     * This column should never be null
     */
    not_null: number;
    default_not_null: number;
    bigint_col?: number;
    bigserial_col: number;
    bit_col?: string;
    bit_varying_col?: string;
    boolean_col?: boolean;
    box_col?: string;
    bytea_col: Buffer;
    character_col?: string;
    character_varying_col?: string;
    cidr_col?: string;
    circle_col: {
        x: number;
        y: number;
        radius: number;
    };
    date_col?: Date;
    double_col?: number;
    inet_col?: string;
    integer_col?: number;
    interval_col: {
        years: number;
        months: number;
        days: number;
        hours: number;
        minutes: number;
        seconds: number;
        milliseconds: number;
    };
    json_col?: Json<TJson_col>;
    jsonb_col?: Json<TJsonb_col>;
    line_col?: string;
    lseg_col?: string;
    macaddr_col?: string;
    money_col?: string;
    numeric_col?: number;
    path_col?: string;
    pg_lsn_col?: string;
    point_col: {
        x: number;
        y: number;
    };
    polygon_col?: string;
    real_col?: number;
    smallint_col?: number;
    smallserial_col: number;
    serial_col: number;
    text_col?: string;
    time_col?: string;
    time_with_time_zone_col?: Date;
    timestamp_col?: Date;
    timestamp_with_time_zone_col?: Date;
    tsquery_col?: string;
    tsvector_col?: string;
    txid_snapshot_col?: string;
    uuid_col?: string;
    xml_col?: string;
    item: string;
    /**
     *
     *   This column is an enum.
     *   It also contains several lines:
     *     - line1
     *     - line2
     *
     */
    state?: "Active" | "Pending" | "Dispute" | "Closed";
    state_arr?: ("Active" | "Pending" | "Dispute" | "Closed")[];
    item_arr?: string[];
    static_arr?: number[];
}
export interface TMP2Sql1Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: TMP2Sql1Params;
    result: TMP2Sql1Result<TJson_col, TJsonb_col>[];
}
export interface TMP2Sql2Params<TJson_col = unknown, TJsonb_col = unknown> {
    id?: number;
}
export interface TMP2Sql2Result {
    id: number;
    character_col?: string;
}
export interface TMP2Sql2Query<TJson_col = unknown, TJsonb_col = unknown> {
    params: TMP2Sql2Params<TJson_col, TJsonb_col>;
    result: TMP2Sql2Result[];
}
export interface TMP2Sql3Params {
    id?: number;
}
export interface TMP2Sql3Result {
    id: number;
    character_col?: string;
}
export interface TMP2Sql3Query {
    params: TMP2Sql3Params;
    result: TMP2Sql3Result[];
}
"
`;

exports[`CLI Should use type prefix when generating files: ts-file2.queries.ts 1`] = `
"export interface TMP2Sql2Params {
    id?: number;
}
export interface TMP2Sql2Result {
    character_col?: string;
}
export interface TMP2Sql2Query {
    params: TMP2Sql2Params;
    result: TMP2Sql2Result[];
}
"
`;
