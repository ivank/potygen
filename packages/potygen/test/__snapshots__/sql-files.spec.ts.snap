// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sql Files Should convert complex sql template tags account-levelisations.query.sql: account-levelisations.query.sql 1`] = `
Object {
  "text": "SELECT
  account_levelisations.id AS \\"id\\",
  account_levelisations.levelisation_id AS \\"levelisationId\\",
  account_levelisations.account_id AS \\"accountId\\",
  account_levelisations.installation_id AS \\"installationId\\",
  account_levelisations.state AS \\"state\\",
  account_levelisations.is_accepted AS \\"isAccepted\\",
  account_levelisations.generation_start_read_on AS \\"generationStartReadOn\\",
  account_levelisations.generation_start_read_value AS \\"generationStartReadValue\\",
  account_levelisations.generation_end_read_on AS \\"generationEndReadOn\\",
  account_levelisations.generation_end_read_value AS \\"generationEndReadValue\\",
  account_levelisations.generation_percentage_split AS \\"generationPercentageSplit\\",
  account_levelisations.generation_payment AS \\"generationPayment\\",
  account_levelisations.generation_energy AS \\"generationEnergy\\",
  account_levelisations.export_start_read_on AS \\"exportStartReadOn\\",
  account_levelisations.export_start_read_value AS \\"exportStartReadValue\\",
  account_levelisations.export_end_read_on AS \\"exportEndReadOn\\",
  account_levelisations.export_end_read_value AS \\"exportEndReadValue\\",
  account_levelisations.export_percentage_split AS \\"exportPercentageSplit\\",
  account_levelisations.export_payment AS \\"exportPayment\\",
  account_levelisations.export_energy AS \\"exportEnergy\\",
  account_levelisations.export_type AS \\"exportType\\",
  account_levelisations.technology_type AS \\"technologyType\\",
  account_levelisations.total_payment AS \\"totalPayment\\",
  account_levelisations.vat_payment AS \\"vatPayment\\",
  account_levelisations.generation_periods AS \\"generationPeriods\\",
  account_levelisations.export_periods AS \\"exportPeriods\\",
  issues.payload->>'code' AS \\"errorCode\\",
  issues.payload->'params' AS \\"errorParams\\",
  contracts.scheme_account_reference AS \\"cfrFitId\\",
  account_levelisations.resolved_postlev_id AS \\"resolvedPostlevId\\",
  account_levelisations.is_bacs_payments_sent AS \\"isBacsPaymentsSent\\",
  account_levelisations.is_cheque_payments_sent AS \\"isChequePaymentsSent\\"
FROM
  account_levelisations
  LEFT JOIN issues
    ON issues.reference_id = account_levelisations.id AND issues.reference_type = 'Account Levelisation'
    AND issues.type = 'Account Levelisation'
  JOIN contracts
    ON account_levelisations.installation_id = contracts.installation_id
WHERE
  -- Filter
  ($1 = '' OR (contracts.scheme_account_reference = $1))
  AND
    (
      $2 = ''
      OR ($2::BOOLEAN = TRUE AND account_levelisations.resolved_postlev_id IS NOT NULL)
    )
  AND ($3::account_levelisation_state IS NULL OR (account_levelisations.state = $3))
  -- Ids filter, for loading specific ids, skip if empty array
  AND
    ($4::int IS NULL OR account_levelisations.levelisation_id = $4)
  AND (cardinality($5::int[]) = 0 OR (account_levelisations.id = ANY($5::int[])))
-- Sort by difference, dateOn, value
ORDER BY
  CASE WHEN $6 = 'totalPayment' AND $7 = 'DESC' THEN account_levelisations.total_payment END DESC,
  CASE WHEN $6 = 'totalPayment' AND $7 = 'ASC' THEN account_levelisations.total_payment END ASC,
  CASE WHEN $6 = 'vatPayment' AND $7 = 'DESC' THEN account_levelisations.vat_payment END DESC,
  CASE WHEN $6 = 'vatPayment' AND $7 = 'ASC' THEN account_levelisations.vat_payment END ASC,
  CASE WHEN $6 = 'generationPayment' AND $7 = 'DESC' THEN account_levelisations.generation_payment END
  DESC,
  CASE WHEN $6 = 'generationPayment' AND $7 = 'ASC' THEN account_levelisations.generation_payment END
  ASC,
  CASE WHEN $6 = 'exportPayment' AND $7 = 'DESC' THEN account_levelisations.export_payment END DESC,
  CASE WHEN $6 = 'exportPayment' AND $7 = 'ASC' THEN account_levelisations.export_payment END ASC,
  CASE WHEN $6 = 'generationEnergy' AND $7 = 'DESC' THEN account_levelisations.generation_energy END
  DESC,
  CASE WHEN $6 = 'generationEnergy' AND $7 = 'ASC' THEN account_levelisations.generation_energy END ASC,
  CASE WHEN $6 = 'exportEnergy' AND $7 = 'DESC' THEN account_levelisations.export_energy END DESC,
  CASE WHEN $6 = 'exportEnergy' AND $7 = 'ASC' THEN account_levelisations.export_energy END ASC,
  CASE WHEN $6 = 'cfrFitId' AND $7 = 'DESC' THEN contracts.scheme_account_reference END DESC,
  CASE WHEN $6 = 'cfrFitId' AND $7 = 'ASC' THEN contracts.scheme_account_reference END ASC,
  CASE WHEN $6 = 'state' AND $7 = 'DESC' THEN account_levelisations.state END DESC,
  CASE WHEN $6 = 'state' AND $7 = 'ASC' THEN account_levelisations.state END ASC,
  CASE WHEN $6 = 'isAccepted' AND $7 = 'DESC' THEN account_levelisations.is_accepted END DESC,
  CASE WHEN $6 = 'isAccepted' AND $7 = 'ASC' THEN account_levelisations.is_accepted END ASC,
  CASE WHEN $6 = 'error' AND $7 = 'DESC' THEN issues.payload->>'code' END DESC,
  CASE WHEN $6 = 'error' AND $7 = 'ASC' THEN issues.payload->>'code' END ASC,
  CASE WHEN $6 = 'exportType' AND $7 = 'DESC' THEN account_levelisations.export_type::text END DESC,
  CASE WHEN $6 = 'exportType' AND $7 = 'ASC' THEN account_levelisations.export_type::text END ASC
-- Pagination
LIMIT $8::int
OFFSET $9::int
",
  "values": Array [
    "test",
    true,
    "Active",
    1,
    Array [
      2,
      3,
    ],
    "col1",
    "ASC",
    1,
    10,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags account-levelisations-set-bulk-update.query.sql: account-levelisations-set-bulk-update.query.sql 1`] = `
Object {
  "text": "UPDATE account_levelisations
SET
  is_cheque_payments_sent = CASE
    WHEN
      EXISTS (SELECT id FROM accounts WHERE accounts.id = account_levelisations.account_id AND payment_plan = 'Cheque')
      THEN TRUE
    ELSE NULL
  END,
  is_bacs_payments_sent = CASE
    WHEN EXISTS (SELECT id FROM accounts WHERE accounts.id = account_levelisations.account_id AND payment_plan = 'BACs')
      THEN TRUE
    ELSE NULL
  END
WHERE
  account_levelisations.id = ANY($1::int[]) AND is_accepted = TRUE
RETURNING
  id
",
  "values": Array [
    Array [
      1,
      2,
    ],
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags accounts.query.sql: accounts.query.sql 1`] = `
Object {
  "text": "SELECT DISTINCT ON (accounts.id)
  accounts.id,
  accounts.state,
  accounts.start_on AS \\"startOn\\",
  contacts.first_name AS \\"firstName\\",
  contacts.last_name AS \\"lastName\\",
  contacts.email,
  CONCAT_WS(
    ' ',
    installation_addresses.address_line_1,
    installation_addresses.address_line_2,
    installation_addresses.city,
    installation_addresses.postcode
  ) AS \\"address\\",
  ARRAY_AGG(contracts.scheme_account_reference) AS \\"fitIds\\"
FROM
  accounts
  -- Join all the related tables to do a combined search
  JOIN customers
    ON customers.id = accounts.customer_id
  JOIN contacts
    ON contacts.id = customers.primary_contact_id
  JOIN addresses
    ON addresses.id = contacts.address_id
  JOIN contracts
    ON contracts.account_id = accounts.id
  JOIN installations
    ON contracts.installation_id = installations.id
  JOIN addresses AS installation_addresses
    ON installations.address_id = installation_addresses.id
WHERE
  -- Full text search for each relation, match anything found
  -- Separated into different vectors, so we can take advantage of indexes on each of the tables
  -- Be sure to update the indexes if you update the queries here
  (
    $1 = ''
    OR
      (
        to_tsvector('english', accounts.beneficiary_name) @@ plainto_tsquery('english', $1)
        OR
          to_tsvector(
            'english',
            CONCAT_WS(' ', contacts.first_name, contacts.last_name, contacts.email, contacts.phone)
          )
          @@ plainto_tsquery('english', $1)
        OR
          to_tsvector('english', CONCAT_WS(' ', addresses.address_line_1, addresses.address_line_2, addresses.city))
          @@ plainto_tsquery('english', $1)
        OR
          to_tsvector(
            'english',
            CONCAT_WS(
              ' ',
              installation_addresses.address_line_1,
              installation_addresses.address_line_2,
              installation_addresses.city,
              installation_addresses.postcode
            )
          )
          @@ plainto_tsquery('english', $1)
        OR accounts.id::varchar = $1
        OR installations.supply_mpan = $1
        OR installations.export_mpan = $1
        -- Search for direct matches for ids
        OR
          accounts.beneficiary_account_number = $1
        OR contracts.scheme_account_reference = $1
      )
  )
  -- Ids filter, for loading specific ids, skip if empty array
  AND
    (cardinality($2::int[]) = 0 OR (accounts.id = ANY($2::int[])))
GROUP BY
  accounts.id,
  accounts.start_on,
  contacts.first_name,
  contacts.last_name,
  contacts.email,
  installation_addresses.address_line_1,
  installation_addresses.address_line_2,
  installation_addresses.city,
  installation_addresses.postcode
-- Pagination
LIMIT $3::int
OFFSET $4::int
",
  "values": Array [
    "test",
    Array [
      2,
      3,
    ],
    1,
    10,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags active-meters-wth-reads.query.sql: active-meters-wth-reads.query.sql 1`] = `
Object {
  "text": "-- active-meters-with-reads.query
SELECT
  meters.id,
  meters.serial_number AS \\"msn\\",
  meters.mpan,
  meters.make,
  meters.model,
  installation_meters.meter_type AS \\"type\\",
  (
    SELECT
      json_build_object(
        'id', current_reads.id,
        'value', current_reads.value,
        'dateOn', current_reads.date_on,
        'submittedAt', current_reads.submitted_at,
        'reason', current_reads.reason,
        'type', current_reads.type
      ) AS \\"read\\"
    FROM active_reads AS current_reads
    WHERE
      current_reads.meter_id = meters.id AND current_reads.type <> 'Meter Verification'
      AND current_reads.date_on BETWEEN $1 AND $2
    ORDER BY
      current_reads.date_on DESC
    LIMIT 1
  ) AS \\"currentPeriodRead\\",
  (
    SELECT
      json_build_object(
        'id', previous_reads.id,
        'value', previous_reads.value,
        'dateOn', previous_reads.date_on,
        'submittedAt', previous_reads.submitted_at,
        'reason', previous_reads.reason,
        'type', previous_reads.type
      ) AS \\"read\\"
    FROM active_reads AS previous_reads
    WHERE
      previous_reads.meter_id = meters.id AND previous_reads.type <> 'Meter Verification'
      AND previous_reads.date_on < $1
    ORDER BY
      previous_reads.date_on DESC
    LIMIT 1
  ) AS \\"previousPeriodRead\\"
FROM
  meters
  JOIN installation_meters
    ON installation_meters.meter_id = meters.id
  JOIN contracts
    ON contracts.installation_id = installation_meters.installation_id
WHERE
  installation_meters.end_on IS NULL AND contracts.account_id = $3
  AND ($4::int IS NULL OR meters.id = $4)
ORDER BY
  meters.id ASC, installation_meters.meter_type ASC
",
  "values": Array [
    2021-12-01T00:00:00.000Z,
    2021-12-31T00:00:00.000Z,
    1,
    undefined,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags bacs.query.sql: bacs.query.sql 1`] = `
Object {
  "text": "SELECT
  p.fit_reference AS \\"fitId\\",
  a.beneficiary_name AS \\"name\\",
  p.amount AS \\"amount\\",
  p.levelisation_reference AS \\"quarter\\",
  CONCAT(a.beneficiary_sort_code, a.beneficiary_account_number) AS \\"bankDetails\\",
  a2.address_line_1 AS \\"addressLine1\\",
  a2.address_line_2 AS \\"addressLine2\\",
  a2.address_line_3 AS \\"addressLine3\\",
  a2.postcode AS \\"postcode\\"
FROM
  payments AS p
  LEFT JOIN accounts AS a
    ON a.id = p.account_id
  LEFT JOIN customers AS c2
    ON c2.id = a.customer_id
  LEFT JOIN contacts AS c3
    ON c3.id = c2.primary_contact_id
  LEFT JOIN addresses AS a2
    ON a2.id = c3.address_id
WHERE
  a.payment_plan = 'BACs' AND p.levelisation_reference = $1
LIMIT $2
OFFSET $3
",
  "values": Array [
    "FQ1",
    1,
    2,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags contracts.sql: contracts.sql 1`] = `
Object {
  "text": "INSERT INTO contracts (
  source_system_id,
  account_id,
  contact_id,
  installation_id,
  generation_tariff_id,
  export_tariff_id,
  generation_percentage_split,
  export_percentage_split,
  scheme_type,
  scheme_account_reference,
  confirmation_on,
  terms_and_conditions_agreed,
  created_at,
  updated_at
)
SELECT
  gai.\\"GenerationAccountInstallationId\\",
  (SELECT accounts.id FROM accounts WHERE accounts.source_system_id = ca.\\"CustomerAccountId\\"),
  (SELECT contacts.id FROM contacts WHERE contacts.source_system_id = ca.\\"CustomerId\\"),
  (SELECT installations.id FROM installations WHERE installations.source_system_id = gai.\\"InstallationId\\"),
  -- Since tariff information is on the meter, we try to find a meter with type \\"Generation\\", and extract its tariff
  (
    SELECT tariffs.id
    FROM
      fit.InstallationMeter AS im
      JOIN fit.Meter AS m
        ON im.\\"MeterId\\" = m.\\"MeterId\\"
      JOIN fit.MeterType AS mt
        ON m.\\"MeterTypeId\\" = mt.\\"MeterTypeId\\"
      JOIN tariffs
        ON tariffs.source_system_id = m.\\"TariffId\\"
    WHERE
      i.\\"InstallationId\\" = im.\\"InstallationId\\" AND mt.\\"MeterTypeTitle\\" = 'Generation'
    LIMIT 1
  ),
  -- Link to the manually created tariffs for export meters in tariffs.sql.ts
  -- The logic for which one to use is taken from Fit_Proc.usp_Export query in sql-fit db.
  (
    SELECT tariffs.id
    FROM tariffs
    WHERE
      tariffs.source_system_id = CASE WHEN i.\\"EligibilityDate\\" < '2012-08-01' THEN 100001 ELSE 100002 END
  ),
  -- Generation Percentage Split.
  -- Since this is a property of the contract, not the meter itself, we move it here from installation meters
  (
    SELECT im.\\"PercentageSplit\\"
    FROM
      fit.InstallationMeter AS im
      JOIN fit.Meter AS m
        ON im.\\"MeterId\\" = m.\\"MeterId\\"
      JOIN fit.MeterType AS mt
        ON m.\\"MeterTypeId\\" = mt.\\"MeterTypeId\\"
    WHERE
      i.\\"InstallationId\\" = im.\\"InstallationId\\" AND mt.\\"MeterTypeTitle\\" = 'Generation'
      AND im.\\"PercentageSplit\\" IS NOT NULL
      AND im.\\"PercentageSplit\\" <> 100
    LIMIT 1
  ),
  -- Export Percentage Split.
  -- Since this is a property of the contract, not the meter itself, we move it here from installation meters
  (
    SELECT im.\\"PercentageSplit\\"
    FROM
      fit.InstallationMeter AS im
      JOIN fit.Meter AS m
        ON im.\\"MeterId\\" = m.\\"MeterId\\"
      JOIN fit.MeterType AS mt
        ON m.\\"MeterTypeId\\" = mt.\\"MeterTypeId\\"
    WHERE
      i.\\"InstallationId\\" = im.\\"InstallationId\\" AND mt.\\"MeterTypeTitle\\" = 'Export' AND im.\\"PercentageSplit\\" IS NOT NULL
      AND im.\\"PercentageSplit\\" <> 100
    LIMIT 1
  ),
  -- If it doesn't have a FIT id, and has a SEG id, it must be SEG
  (CASE WHEN i.\\"SEGId\\" IS NOT NULL AND i.\\"CFRFiTId\\" IS NULL THEN 'SEG' ELSE 'FIT' END)::contract_scheme_types,
  -- Helper from installations.sql.ts
  COALESCE(SUBSTRING(UPPER(i.\\"CFRFiTId\\"), '(FIT\\\\\\\\d+)'), i.\\"SEGId\\", i.\\"CFRFiTId\\"),
  i.\\"ConfirmationDate\\",
  TRUE,
  gai.\\"DateInserted\\",
  gai.\\"DateUpdated\\"
FROM
  fit.GenerationAccountInstallation AS gai
  JOIN fit.GenerationAccount AS ga
    ON gai.\\"GenerationAccountId\\" = ga.\\"GenerationAccountId\\"
  JOIN fit.Installation AS i
    ON gai.\\"InstallationId\\" = i.\\"InstallationId\\"
  -- Check if the is \\"primary account\\" bit flag is set.
  -- Special exception for fit account 422, as it does not have a primary account
  JOIN fit.CustomerAccount AS ca
    ON ca.\\"FitAccountId\\" = ga.\\"FitAccountId\\" AND ((ca.\\"CustomerRoleValue\\" & 1) > 0 OR ca.\\"FitAccountId\\" = 422)
ON CONFLICT (source_system_id) WHERE source_system_id IS NOT NULL
  DO UPDATE
    SET
      account_id = EXCLUDED.account_id,
      contact_id = EXCLUDED.contact_id,
      installation_id = EXCLUDED.installation_id,
      generation_tariff_id = EXCLUDED.generation_tariff_id,
      export_tariff_id = EXCLUDED.export_tariff_id,
      scheme_type = EXCLUDED.scheme_type,
      scheme_account_reference = EXCLUDED.scheme_account_reference,
      confirmation_on = EXCLUDED.confirmation_on,
      terms_and_conditions_agreed = EXCLUDED.terms_and_conditions_agreed,
      created_at = EXCLUDED.created_at,
      updated_at = EXCLUDED.updated_at
",
  "values": Array [],
}
`;

exports[`Sql Files Should convert complex sql template tags cte-levelisation-details.query.sql: cte-levelisation-details.query.sql 1`] = `
Object {
  "text": "WITH
  items AS (SELECT * FROM account_levelisations WHERE account_levelisations.levelisation_id = $1),
  active_items AS (SELECT * FROM items WHERE state = 'Success' AND is_accepted = TRUE)
SELECT
  levelisations.id AS \\"id\\",
  (SELECT COUNT(items.id)::int FROM items) AS \\"totalCount\\",
  (SELECT SUM(active_items.export_payment) FROM active_items) AS \\"fitTotalExportPayment\\"
FROM levelisations
WHERE
  levelisations.id = $1
",
  "values": Array [
    1,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags delete-accounts.query.sql: delete-accounts.query.sql 1`] = `
Object {
  "text": "DELETE FROM accounts
WHERE
  EXISTS (
    SELECT tariffs.id
    FROM
      contracts
      JOIN tariffs
        ON contracts.generation_tariff_id = tariffs.id
    WHERE
      contracts.account_id = accounts.id AND tariffs.type = 'Generation' AND contracts.scheme_type = $1
  )
  AND accounts.state = $2
RETURNING
  id,
  source_system_id AS \\"sourceSystemId\\",
  customer_id AS \\"customerId\\"
",
  "values": Array [
    undefined,
    undefined,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags generation-read-data.query.sql: generation-read-data.query.sql 1`] = `
Object {
  "text": "SELECT
  meter_reads.date_on AS \\"dateOn\\",
  meter_reads.value
FROM
  meter_reads
  JOIN installation_meters
    ON meter_reads.meter_id = installation_meters.meter_id
WHERE
  installation_meters.installation_id = $1 AND installation_meters.meter_type = 'Generation'
  AND meter_reads.deleted_at IS NULL
  AND meter_reads.type <> 'Meter Verification'
  AND meter_reads.is_accepted = TRUE
ORDER BY
  ABS(meter_reads.date_on - $2::date) ASC
LIMIT 1
",
  "values": Array [
    1,
    2020-01-01T00:00:00.000Z,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags installation-meter-update.query.sql: installation-meter-update.query.sql 1`] = `
Object {
  "text": "UPDATE installation_meters SET end_on = $1 WHERE end_on IS NULL AND meter_id = $2
",
  "values": Array [
    2020-01-01T00:00:00.000Z,
    1,
  ],
}
`;

exports[`Sql Files Should convert complex sql template tags installations.sql: installations.sql 1`] = `
Object {
  "text": "INSERT INTO installations (
  source_system_id,
  address_id,
  name,
  type,
  technology_type,
  property_type,
  export_type,
  commissioned_on,
  decommissioned_on,
  eligibility_start_on,
  eligibility_end_on,
  installed_on,
  verified_on,
  reverified_on,
  inspected_on,
  mcs_reference,
  tic_reference,
  dnc_reference,
  roofit_reference,
  name_of_grant,
  value_of_grant,
  date_grant_repaid,
  epc_rate,
  epc_date,
  epc_number,
  has_battery_storage,
  battery_installation_date_on,
  export_mpan,
  supply_mpan,
  switched_from,
  switched_to,
  switched_on,
  legacy_fit_db_id,
  created_at,
  updated_at
)
SELECT
  i.\\"InstallationId\\",
  (SELECT addresses.id FROM addresses WHERE addresses.source_system_id = i.\\"AddressId\\"),
  i.\\"InstallationName\\",
  it.\\"InstallationTypeTitle\\"::installation_types,
  gtt.\\"GeneratorTechnologyTypeRef\\"::installation_technology_types,
  pt.\\"PropertyTypeTitle\\"::installation_property_type,
  (
    CASE i.\\"ExportType\\"
      WHEN NULL THEN NULL
      WHEN 'SEG' THEN NULL
      WHEN 'Deemed' THEN 'Deemed'
      WHEN 'Off_Grid' THEN 'Off Grid'
      WHEN 'PPA_OVO' THEN 'PPA'
      WHEN 'Metered_Standard_Tariff' THEN 'Metered Export'
      WHEN 'PPA_Other' THEN 'PPA'
    END
  )::installation_export_type,
  i.\\"TariffDate\\",
  i.\\"DecommisionedDate\\",
  i.\\"EligibilityDate\\",
  i.\\"EligibilityEndDate\\",
  i.\\"DateInstalled\\",
  -- Get the first verification date
  (
    SELECT ivi.\\"DateVerified\\"
    FROM fit.InstallationVerificationInfo AS ivi
    WHERE
      ivi.\\"InstallationId\\" = i.\\"InstallationId\\"
    ORDER BY
      ivi.\\"DateVerified\\" ASC
    LIMIT 1
  ),
  -- Get the last verification date
  -- If there are more than 2 verification dates, get the latest one
  (
    SELECT (ARRAY_AGG(\\"DateVerified\\" ORDER BY \\"DateVerified\\" DESC))[1]
    FROM fit.InstallationVerificationInfo AS ivi
    WHERE
      ivi.\\"InstallationId\\" = i.\\"InstallationId\\"
    GROUP BY
      \\"InstallationId\\"
    HAVING
      COUNT(\\"InstallationId\\") > 1
  ),
  i.\\"ConfirmationDate\\",
  i.\\"MCSInstallerCertificateNo\\",
  i.\\"InstalledCapacity\\",
  i.\\"InstalledCapacity\\",
  i.\\"ROOFITNo\\",
  i.\\"NameOfGrant\\",
  i.\\"ValueOfGrant\\",
  i.\\"DateGrantRepaid\\",
  i.\\"EPCRate\\",
  i.\\"DateInstalled\\",
  NULL,
  NULL,
  NULL,
  (
    SELECT m.\\"MPAN\\"
    FROM
      fit.InstallationMeter AS im
      JOIN fit.Meter AS m
        ON m.\\"MeterId\\" = im.\\"MeterId\\"
      JOIN fit.MeterType AS mt
        ON m.\\"MeterTypeId\\" = mt.\\"MeterTypeId\\"
    WHERE
      mt.\\"MeterTypeTitle\\" = 'Export' AND im.\\"InstallationId\\" = i.\\"InstallationId\\"
    LIMIT 1
  ),
  c.\\"SupplyMPAN\\",
  (
    SELECT s.\\"Company\\"
    FROM fit.Switch AS s
    WHERE
      s.\\"InstallationId\\" = i.\\"InstallationId\\" AND s.\\"IsSwitchIn\\" = TRUE
    ORDER BY
      s.\\"DateInserted\\" DESC
    LIMIT 1
  ),
  (
    SELECT s.\\"Company\\"
    FROM fit.Switch AS s
    WHERE
      s.\\"InstallationId\\" = i.\\"InstallationId\\" AND s.\\"IsSwitchIn\\" = FALSE
    ORDER BY
      s.\\"DateInserted\\" DESC
    LIMIT 1
  ),
  (
    SELECT s.\\"ActualSwitchDate\\"
    FROM fit.Switch AS s
    WHERE
      s.\\"InstallationId\\" = i.\\"InstallationId\\"
    ORDER BY
      s.\\"DateInserted\\" DESC
    LIMIT 1
  ),
  -- Preserve the original CFRFiTId
  i.\\"CFRFiTId\\",
  i.\\"DateInserted\\",
  i.\\"DateUpdated\\"
FROM
  fit.Installation AS i
  JOIN fit.InstallationType AS it
    ON it.\\"InstallationTypeId\\" = i.\\"InstallationTypeId\\"
  JOIN fit.GeneratorTechnologyType AS gtt
    ON gtt.\\"GeneratorTechnologyTypeId\\" = i.\\"GeneratorTechnologyTypeId\\"
  JOIN fit.PropertyType AS pt
    ON pt.\\"PropertyTypeId\\" = i.\\"PropertyTypeId\\"
  JOIN fit.GenerationAccountInstallation AS gai
    ON gai.\\"InstallationId\\" = i.\\"InstallationId\\"
  JOIN fit.GenerationAccount AS ga
    ON ga.\\"GenerationAccountId\\" = gai.\\"GenerationAccountId\\"
  -- Check if the is \\"primary account\\" bit flag is set.
  -- Special exception for fit account 422, as it does not have a primary account
  JOIN fit.CustomerAccount AS ca
    ON ca.\\"FitAccountId\\" = ga.\\"FitAccountId\\" AND ((ca.\\"CustomerRoleValue\\" & 1) > 0 OR ca.\\"FitAccountId\\" = 422)
  LEFT JOIN fit.Customer AS c
    ON c.\\"CustomerId\\" = ca.\\"CustomerId\\"
ON CONFLICT (source_system_id) WHERE source_system_id IS NOT NULL
  DO UPDATE
    SET
      address_id = EXCLUDED.address_id,
      name = EXCLUDED.name,
      type = EXCLUDED.type,
      technology_type = EXCLUDED.technology_type,
      property_type = EXCLUDED.property_type,
      export_type = EXCLUDED.export_type,
      commissioned_on = EXCLUDED.commissioned_on,
      decommissioned_on = EXCLUDED.decommissioned_on,
      eligibility_start_on = EXCLUDED.eligibility_start_on,
      eligibility_end_on = EXCLUDED.eligibility_end_on,
      installed_on = EXCLUDED.installed_on,
      verified_on = EXCLUDED.verified_on,
      reverified_on = EXCLUDED.reverified_on,
      inspected_on = EXCLUDED.inspected_on,
      mcs_reference = EXCLUDED.mcs_reference,
      tic_reference = EXCLUDED.tic_reference,
      dnc_reference = EXCLUDED.dnc_reference,
      roofit_reference = EXCLUDED.roofit_reference,
      name_of_grant = EXCLUDED.name_of_grant,
      value_of_grant = EXCLUDED.value_of_grant,
      date_grant_repaid = EXCLUDED.date_grant_repaid,
      epc_rate = EXCLUDED.epc_rate,
      epc_date = EXCLUDED.epc_date,
      epc_number = EXCLUDED.epc_number,
      has_battery_storage = EXCLUDED.has_battery_storage,
      battery_installation_date_on = EXCLUDED.battery_installation_date_on,
      export_mpan = EXCLUDED.export_mpan,
      supply_mpan = EXCLUDED.supply_mpan,
      switched_from = EXCLUDED.switched_from,
      switched_to = EXCLUDED.switched_to,
      switched_on = EXCLUDED.switched_on,
      legacy_fit_db_id = EXCLUDED.legacy_fit_db_id,
      created_at = EXCLUDED.created_at,
      updated_at = EXCLUDED.updated_at
",
  "values": Array [],
}
`;

exports[`Sql Files Should convert complex sql template tags meter-reads.sql: meter-reads.sql 1`] = `
Object {
  "text": "INSERT INTO meter_reads (
  source_system_id,
  meter_id,
  date_on,
  value,
  type,
  reason,
  is_accepted,
  tolerance,
  created_at,
  updated_at
)
SELECT
  mr.\\"MeterReadingId\\",
  (SELECT meters.id FROM meters WHERE meters.source_system_id = mr.\\"MeterId\\"),
  mr.\\"DateOfReading\\",
  mr.\\"MeterReadingValue\\",
  -- TODO: Verify those are actually what we want from meter reading type
  (
    CASE mr.\\"ReadType\\"
      WHEN 'Closure' THEN 'Closing'
      WHEN 'Closing' THEN 'Closing'
      WHEN 'Clsoing' THEN 'Closing'
      WHEN 'Final' THEN 'Closing'
      WHEN 'opening' THEN 'Opening'
      WHEN 'Opening' THEN 'Opening'
      WHEN 'Physical' THEN 'Meter Verification'
      WHEN 'Customer' THEN 'Quarterly'
      WHEN 'CUSTOMER' THEN 'Quarterly'
      WHEN '' THEN 'Quarterly'
    END
  )::meter_reads_types,
  mr.\\"ReadReason\\",
  -- Reads prior to 2021-03-31 are considered to have all been manually verified, so we can safely assign them to \\"accepted\\"
  CASE WHEN mr.\\"DateOfReading\\" <= '2021-03-31' THEN TRUE ELSE FALSE END,
  CASE WHEN mr.\\"DateOfReading\\" <= '2021-03-31' THEN '{\\"success\\":true}'::jsonb ELSE NULL END,
  mr.\\"DateInserted\\",
  mr.\\"DateUpdated\\"
FROM
  fit.MeterReading AS mr
  JOIN fit.Meter AS m
    ON m.\\"MeterId\\" = mr.\\"MeterId\\"
-- Exclude \\"Deemed\\" Export meters, since they don't have an MPAN and are not actual meters
-- TODO: Figure out where to migrate deemed meter reads to.
WHERE
  m.\\"MPAN\\" IS NOT NULL
ON CONFLICT (source_system_id) WHERE source_system_id IS NOT NULL
  DO UPDATE
    SET
      meter_id = EXCLUDED.meter_id,
      date_on = EXCLUDED.date_on,
      value = EXCLUDED.value,
      type = EXCLUDED.type,
      reason = EXCLUDED.reason,
      -- If the meter read has changed
      -- set the flags to false so we do tolerance checks again
      is_accepted = CASE WHEN meter_reads.value = EXCLUDED.value THEN meter_reads.is_accepted ELSE FALSE END,
      tolerance = CASE WHEN meter_reads.value = EXCLUDED.value THEN meter_reads.tolerance ELSE NULL END,
      created_at = EXCLUDED.created_at,
      updated_at = EXCLUDED.updated_at
",
  "values": Array [],
}
`;

exports[`Sql Files Should convert complex sql template tags rates-by-tariff-ids.query.sql: rates-by-tariff-ids.query.sql 1`] = `
Object {
  "text": "SELECT
  r.tariff_id AS \\"tariffId\\",
  r.rate,
  r.start_date_on AS \\"startOn\\",
  t.code AS \\"tariffCode\\",
  t.type AS \\"tariffType\\",
  r.end_date_on AS \\"endOn\\"
FROM
  tariff_rates AS r
  LEFT JOIN tariffs AS t
    ON r.tariff_id = t.id
WHERE
  start_date_on < NOW() AND (end_date_on::date IS NULL OR end_date_on > NOW()) AND t.id IN ($1,$2,$3)
",
  "values": Array [
    1,
    2,
    3,
  ],
}
`;
