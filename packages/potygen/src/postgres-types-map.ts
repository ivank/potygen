import { UnaryOperatorTag, BinaryOperatorTag } from './grammar.types';
import {
  TypeJson,
  TypeNull,
  TypeUnknown,
  TypeString,
  TypeBoolean,
  TypeNumber,
  TypeBigInt,
  TypeDate,
  TypeArrayConstant,
  TypeConstant,
  TypeAny,
  TypeBuffer,
  TypeObjectLiteralConstant,
} from './query-interface.types';

export const typeJson = (postgresType = 'json'): TypeJson => ({ type: 'Json', postgresType });
export const typeNull = (postgresType = 'null'): TypeNull => ({ type: 'Null', postgresType });
export const typeUnknown = (postgresType = 'any'): TypeUnknown => ({ type: 'Unknown', postgresType });
export const typeAny = (postgresType = 'any'): TypeAny => ({ type: 'Any', postgresType });
export const typeString = (postgresType = 'text'): TypeString => ({ type: 'String', postgresType });
export const typeBuffer = (postgresType = 'bytea'): TypeBuffer => ({ type: 'Buffer', postgresType });
export const typeBoolean = (postgresType = 'bool'): TypeBoolean => ({ type: 'Boolean', postgresType });
export const typeNumber = (postgresType = 'float4'): TypeNumber => ({ type: 'Number', postgresType });
export const typeBigInt = (postgresType = 'int8'): TypeBigInt => ({ type: 'BigInt', postgresType });
export const typeDate = (postgresType = 'date'): TypeDate => ({ type: 'Date', postgresType });

const arr = (items: TypeConstant): TypeArrayConstant => ({
  type: 'ArrayConstant',
  items,
  postgresType: `${items.postgresType}[]`,
});

export const pgTypeAliases: Record<string, keyof typeof pgTypes> = {
  bigint: 'int8',
  bigserial: 'serial8',
  'bit varying': 'varbit',
  boolean: 'bool',
  character: 'char',
  'character varying': 'varchar',
  'double precision': 'float8',
  integer: 'int4',
  int: 'int4',
  numeric: 'decimal',
  real: 'float4',
  float: 'float4',
  smallint: 'int2',
  smallserial: 'serial2',
  serial: 'serial4',
  'time with time zone': 'timetz',
  'time without time zone': 'time',
  'timestamp without time zone': 'timestamp',
  'timestamp with time zone': 'timestamptz',
  array: 'anyarray',
};

export const pgTypes = {
  aclitem: typeString('aclitem'),
  cid: typeString('cid'),
  macaddr: typeString('macaddr'),
  macaddr8: typeString('macaddr8'),
  smgr: typeString('smgr'),
  tid: typeString('tid'),
  uuid: typeString('uuid'),
  xid: typeString('xid'),
  interval: {
    type: 'ObjectLiteralConstant',
    postgresType: 'interval',
    items: [
      { name: 'years', type: typeNumber() },
      { name: 'months', type: typeNumber() },
      { name: 'days', type: typeNumber() },
      { name: 'hours', type: typeNumber() },
      { name: 'minutes', type: typeNumber() },
      { name: 'seconds', type: typeNumber() },
      { name: 'milliseconds', type: typeNumber() },
    ],
  } as TypeObjectLiteralConstant,
  bytea: typeBuffer('bytea'),
  reltime: typeString('reltime'),
  tinterval: typeString('tinterval'),
  char: typeString('char'),
  cstring: typeString('cstring'),
  daterange: typeString('daterange'),
  decimal: typeNumber('decimal'),
  name: typeString('name'),
  any: typeAny('any'),
  anyelement: arr(typeString('anyelement')),
  anyenum: arr(typeString('anyenum')),
  anynonarray: typeAny('anynonarray'),
  anyarray: arr(typeAny('anyarray')),
  anyrange: arr(typeString('anyarray')),
  event_trigger: typeString('event_trigger'),
  fdw_handler: typeString('fdw_handler'),
  index_am_handler: typeString('index_am_handler'),
  internal: typeString('internal'),
  language_handler: typeString('language_handler'),
  opaque: typeString('opaque'),
  pg_aggregate: typeString('pg_aggregate'),
  pg_am: typeString('pg_am'),
  pg_amop: typeString('pg_amop'),
  pg_amproc: typeString('pg_amproc'),
  pg_attrdef: typeString('pg_attrdef'),
  pg_attribute: typeString('pg_attribute'),
  pg_auth_members: typeString('pg_auth_members'),
  pg_authid: typeString('pg_authid'),
  pg_available_extension_versions: typeString('pg_available_extension_versions'),
  pg_available_extensions: typeString('pg_available_extensions'),
  pg_cast: typeString('pg_cast'),
  pg_class: typeString('pg_class'),
  pg_collation: typeString('pg_collation'),
  pg_config: typeString('pg_config'),
  pg_constraint: typeString('pg_constraint'),
  pg_conversion: typeString('pg_conversion'),
  pg_cursors: typeString('pg_cursors'),
  pg_database: typeString('pg_database'),
  pg_db_role_setting: typeString('pg_db_role_setting'),
  pg_ddl_command: typeString('pg_ddl_command'),
  pg_default_acl: typeString('pg_default_acl'),
  pg_depend: typeString('pg_depend'),
  pg_dependencies: typeString('pg_dependencies'),
  pg_description: typeString('pg_description'),
  pg_enum: typeString('pg_enum'),
  pg_event_trigger: typeString('pg_event_trigger'),
  pg_extension: typeString('pg_extension'),
  pg_file_settings: typeString('pg_file_settings'),
  pg_foreign_data_wrapper: typeString('pg_foreign_data_wrapper'),
  pg_foreign_server: typeString('pg_foreign_server'),
  pg_foreign_table: typeString('pg_foreign_table'),
  pg_group: typeString('pg_group'),
  pg_hba_file_rules: typeString('pg_hba_file_rules'),
  pg_index: typeString('pg_index'),
  pg_indexes: typeString('pg_indexes'),
  pg_inherits: typeString('pg_inherits'),
  pg_init_privs: typeString('pg_init_privs'),
  pg_language: typeString('pg_language'),
  pg_largeobject: typeString('pg_largeobject'),
  pg_largeobject_metadata: typeString('pg_largeobject_metadata'),
  pg_locks: typeString('pg_locks'),
  pg_lsn: typeString('pg_lsn'),
  pg_matviews: typeString('pg_matviews'),
  pg_namespace: typeString('pg_namespace'),
  pg_ndistinct: typeString('pg_ndistinct'),
  pg_node_tree: typeString('pg_node_tree'),
  pg_opclass: typeString('pg_opclass'),
  pg_operator: typeString('pg_operator'),
  pg_opfamily: typeString('pg_opfamily'),
  pg_partitioned_table: typeString('pg_partitioned_table'),
  pg_pltemplate: typeString('pg_pltemplate'),
  pg_policies: typeString('pg_policies'),
  pg_policy: typeString('pg_policy'),
  pg_prepared_statements: typeString('pg_prepared_statements'),
  pg_prepared_xacts: typeString('pg_prepared_xacts'),
  pg_proc: typeString('pg_proc'),
  pg_publication: typeString('pg_publication'),
  pg_publication_rel: typeString('pg_publication_rel'),
  pg_publication_tables: typeString('pg_publication_tables'),
  pg_range: typeString('pg_range'),
  pg_replication_origin: typeString('pg_replication_origin'),
  pg_replication_origin_status: typeString('pg_replication_origin_status'),
  pg_replication_slots: typeString('pg_replication_slots'),
  pg_rewrite: typeString('pg_rewrite'),
  pg_roles: typeString('pg_roles'),
  pg_rules: typeString('pg_rules'),
  pg_seclabel: typeString('pg_seclabel'),
  pg_seclabels: typeString('pg_seclabels'),
  pg_sequence: typeString('pg_sequence'),
  pg_sequences: typeString('pg_sequences'),
  pg_settings: typeString('pg_settings'),
  pg_shadow: typeString('pg_shadow'),
  pg_shdepend: typeString('pg_shdepend'),
  pg_shdescription: typeString('pg_shdescription'),
  pg_shseclabel: typeString('pg_shseclabel'),
  pg_stats: typeString('pg_stats'),
  pg_subscription: typeString('pg_subscription'),
  pg_subscription_rel: typeString('pg_subscription_rel'),
  pg_tables: typeString('pg_tables'),
  pg_tablespace: typeString('pg_tablespace'),
  pg_timezone_abbrevs: typeString('pg_timezone_abbrevs'),
  pg_timezone_names: typeString('pg_timezone_names'),
  pg_transform: typeString('pg_transform'),
  pg_trigger: typeString('pg_trigger'),
  pg_ts_config: typeString('pg_ts_config'),
  pg_ts_config_map: typeString('pg_ts_config_map'),
  pg_ts_dict: typeString('pg_ts_dict'),
  pg_ts_parser: typeString('pg_ts_parser'),
  pg_ts_template: typeString('pg_ts_template'),
  pg_type: typeString('pg_type'),
  pg_user: typeString('pg_user'),
  pg_user_mapping: typeString('pg_user_mapping'),
  pg_user_mappings: typeString('pg_user_mappings'),
  pg_views: typeString('pg_views'),
  trigger: typeString('trigger'),
  tsm_handler: typeString('tsm_handler'),
  gtsvector: typeString('gtsvector'),
  bit: typeString('bit'),
  bpchar: typeString('bpchar'),
  cidr: typeString('cidr'),
  inet: typeString('inet'),
  void: typeString('void'),
  float4: typeNumber('float4'),
  float8: typeNumber('float8'),
  int2vector: typeString('int2vector'),
  int4range: typeString('int4range'),
  int2: typeNumber('int2'),
  int4: typeNumber('int4'),
  int8range: typeString('int8range'),
  int8: typeBigInt('int8'),
  money: typeString('money'),
  jsonb: typeJson('jsonb'),
  json: typeJson('json'),
  oid: typeNumber('oid'),
  regclass: typeString('regclass'),
  regconfig: typeString('regconfig'),
  regdictionary: typeString('regdictionary'),
  regnamespace: typeString('regnamespace'),
  regoper: typeString('regoper'),
  regoperator: typeString('regoperator'),
  regproc: typeString('regproc'),
  regprocedure: typeString('regprocedure'),
  regrole: typeString('regrole'),
  regtype: typeString('regtype'),
  box: typeString('box'),
  path: typeString('path'),
  polygon: typeString('polygon'),
  circle: {
    type: 'ObjectLiteralConstant',
    postgresType: 'circle',
    items: [
      { name: 'x', type: typeNumber() },
      { name: 'y', type: typeNumber() },
      { name: 'radius', type: typeNumber() },
    ],
  } as TypeObjectLiteralConstant,
  line: typeString('line'),
  lseg: typeString('lseg'),
  point: {
    type: 'ObjectLiteralConstant',
    postgresType: 'point',
    items: [
      { name: 'x', type: typeNumber() },
      { name: 'y', type: typeNumber() },
    ],
  } as TypeObjectLiteralConstant,
  abstime: typeString('abstime'),
  date: typeDate('date'),
  time: typeString('time'),
  timestamp: typeDate('timestamp'),
  timestamptz: typeDate('timestamptz'),
  timetz: typeDate('timetz'),
  bool: typeBoolean('bool'),
  tsrange: typeString('tsrange'),
  numrange: typeString('numrange'),
  tstzrange: typeString('tstzrange'),
  oidvector: typeString('oidvector'),
  record: typeString('record'),
  refcursor: typeString('refcursor'),
  serial8: typeNumber('serial8'),
  serial4: typeNumber('serial4'),
  serial2: typeNumber('serial2'),
  text: typeString('text'),
  tsquery: typeString('tsquery'),
  tsvector: typeString('tsvector'),
  txid_snapshot: typeString('txid_snapshot'),
  unknown: typeUnknown('unknown'),
  varbit: typeString('varbit'),
  varchar: typeString('varchar'),
  xml: typeString('xml'),
  null: typeNull('null'),
};

export const unaryOperatorTypes: { [type in UnaryOperatorTag['value']]: TypeConstant } = {
  '+': typeNumber(),
  '-': typeNumber(),
  NOT: typeBoolean(),
  ISNULL: typeBoolean(),
  NOTNULL: typeBoolean(),
};

export const binaryOperatorTypes: {
  [type in BinaryOperatorTag['value']]: Array<[left: TypeConstant, right: TypeConstant, result: TypeConstant]>;
} = {
  '^': [
    [typeNumber(), typeNumber(), typeNumber()],
    [typeBigInt(), typeBigInt(), typeBigInt()],
  ],
  '%': [
    [typeNumber(), typeNumber(), typeNumber()],
    [typeBigInt(), typeBigInt(), typeBigInt()],
  ],
  '+': [
    [typeNumber(), typeNumber(), typeNumber()],
    [typeBigInt(), typeBigInt(), typeNumber()],
    [typeDate(), typeString(), typeDate()],
  ],
  '-': [
    [typeNumber(), typeNumber(), typeNumber()],
    [typeBigInt(), typeBigInt(), typeNumber()],
    [typeJson(), typeString(), typeJson()],
    [typeJson(), arr(typeString()), typeJson()],
    [typeDate(), typeString(), typeDate()],
    [typeDate(), typeDate(), typeDate()],
  ],
  '/': [[typeNumber(), typeNumber(), typeNumber()]],
  '*': [
    [typeNumber(), typeNumber(), typeNumber()],
    [typeBigInt(), typeBigInt(), typeBigInt()],
    [typeNumber(), typeString(), typeString()],
    [typeDate(), typeString(), typeDate()],
  ],
  OR: [[typeAny(), typeAny(), typeBoolean()]],
  AND: [[typeAny(), typeAny(), typeBoolean()]],
  '||': [
    [typeString(), typeString(), typeString()],
    [typeJson(), typeJson(), typeJson()],
  ],
  '>=': [
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
  ],
  '<=': [
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
  ],
  '>': [
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
  ],
  '<': [
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
  ],
  '=': [
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeString(), typeString(), typeBoolean()],
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeJson(), typeJson(), typeBoolean()],
  ],
  '!=': [
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeString(), typeString(), typeBoolean()],
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeJson(), typeJson(), typeBoolean()],
  ],
  '<>': [
    [typeNumber(), typeNumber(), typeBoolean()],
    [typeBigInt(), typeBigInt(), typeBoolean()],
    [typeDate(), typeDate(), typeBoolean()],
    [typeString(), typeString(), typeBoolean()],
    [typeBoolean(), typeBoolean(), typeBoolean()],
    [typeJson(), typeJson(), typeBoolean()],
  ],
  IN: [[typeAny(), typeAny(), typeBoolean()]],
  '@@': [[typeString(), typeString(), typeBoolean()]],
  LIKE: [[typeString(), typeString(), typeBoolean()]],
  ILIKE: [[typeString(), typeString(), typeBoolean()]],
  IS: [[typeAny(), typeAny(), typeBoolean()]],
  '->': [
    [typeJson(), typeNumber(), typeJson()],
    [typeJson(), typeString(), typeJson()],
  ],
  '->>': [
    [typeJson(), typeNumber(), typeString()],
    [typeJson(), typeString(), typeString()],
  ],
  '#>': [[typeJson(), arr(typeString()), typeJson()]],
  '#-': [[typeJson(), arr(typeString()), typeJson()]],
  '#>>': [[typeJson(), arr(typeString()), typeString()]],
  '?': [[typeJson(), typeString(), typeBoolean()]],
  '?|': [[typeJson(), arr(typeString()), typeBoolean()]],
  '?&': [[typeJson(), arr(typeString()), typeBoolean()]],
  '@>': [
    [typeString(), typeString(), typeBoolean()],
    [typeJson(), typeJson(), typeBoolean()],
  ],
  '<->': [[typeString(), typeString(), typeString()]],
  '<@': [
    [typeString(), typeString(), typeBoolean()],
    [typeJson(), typeJson(), typeBoolean()],
  ],
  '|': [
    [typeJson(), typeJson(), typeBoolean()],
    [typeString(), typeString(), typeString()],
  ],
  '&': [[typeString(), typeString(), typeString()]],
  '#': [[typeString(), typeString(), typeString()]],
  '~': [[typeString(), typeString(), typeString()]],
  '~*': [[typeString(), typeString(), typeString()]],
  '!~': [[typeString(), typeString(), typeString()]],
  '!~*': [[typeString(), typeString(), typeString()]],
  '<<': [[typeString(), typeNumber(), typeString()]],
  '>>': [[typeString(), typeNumber(), typeString()]],
  OVERLAPS: [[typeAny(), typeAny(), typeBoolean()]],
  'AT TIME ZONE': [
    [typeDate(), typeString(), typeDate()],
    [typeAny(), typeString(), typeDate()],
  ],
  'IS DISTINCT FROM': [[typeAny(), typeAny(), typeBoolean()]],
  'IS NOT DISTINCT FROM': [[typeAny(), typeAny(), typeBoolean()]],
};

export interface TypeSpreadConstant {
  type: 'SpreadConstant';
  items: TypeConstant;
}
